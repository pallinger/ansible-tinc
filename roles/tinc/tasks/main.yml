---
- meta: end_play
  when: vpn_ip is not defined

- name: load distribution-specific variables
  include_vars: "vars/{{ ansible_distribution }}.{{ ansible_lsb.major_release }}.yml"

- name: install epel-release (redhat)
  yum: >
    name=epel-release
    state=latest
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7")

- name: install tinc
  package: >
    name=tinc
    state=latest

- name: create tinc systemd service file (redhat)
  template: >
    src=tinc.service.j2
    dest=/etc/systemd/system/tinc.service
  register: tinc_service_file
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7")

- name: systemctl daemon-reload (redhat)
  shell: systemctl daemon-reload
  when: tinc_service_file.changed

- name: ensure tinc netname directory exists
  file: >
    path=/etc/tinc/{{ netname }}/hosts
    recurse=True
    state=directory

- name: ensure {{ netname }} is in /etc/tinc/nets.boot file
  lineinfile: >
    dest=/etc/tinc/nets.boot
    line="{{ netname }}"
    mode=0644
  notify:
    - restart tinc

- name: ensure tinc.conf contains connection to all other nodes
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ netname }}/tinc.conf
  notify:
    - reload tinc

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ netname }}/tinc-up
    mode=0755
  notify:
    - restart tinc

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ netname }}/tinc-down
    mode=0755
  notify:
    - restart tinc

- name: ensure tinc hosts file binds to physical ip address
  lineinfile: >
    dest=/etc/tinc/{{ netname }}/hosts/{{ inventory_hostname }}
    line="Address = {{ physical_ip }}"
    create=yes
  notify:
    - restart tinc

- name: ensure subnet ip address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ netname }}/hosts/{{ inventory_hostname }}
    line="Subnet = {{ vpn_ip }}/{{ vpn_subnet_cidr_netmask }}"
    create=yes
  notify:
    - restart tinc

- name: ensure port is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ netname }}/hosts/{{ inventory_hostname }}
    line="Port = {{ vpn_port }}"
    create=yes
  notify:
    - restart tinc

- name: ensure open vpn port
  ufw: rule=allow port="{{ vpn_port }}"
  when: firewall == 'ufw'

- name: check whether /etc/tinc/netname/hosts/inventory_hostname contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  /etc/tinc/{{ netname }}/hosts/{{ inventory_hostname }}
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key

# this is necessary because the public key will not be generated (non-interactively) if the private key already exists
- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file: >
    path=/etc/tinc/{{ netname }}/rsa_key.priv
    state=absent
  when: public_key.changed

- name: create tinc private key (and append public key to tincd hosts file)
  shell: tincd -n {{ netname }} -K4096
  args:
    creates: /etc/tinc/{{ netname }}/rsa_key.priv
  notify:
    - restart tinc

- name: fetch tinc hosts file after key creation
  fetch: >
    src=/etc/tinc/{{ netname }}/hosts/{{ inventory_hostname }}
    dest=fetch/{{ inventory_hostname }}
    flat=yes
  notify:
    - reload tinc

- name: install rsync ## this is necessary due to the synchronize target below
  package: >
    name=rsync
    state=latest

- name: sync the fetched tinc hosts files on each host
  synchronize: >
    src=fetch/
    dest=/etc/tinc/{{ netname }}/hosts/
    rsync_opts="--exclude=*/"
  notify:
    - reload tinc

- name: check whether there is a directory for predefined tinc hosts files
  local_action: stat path="files/tinc_{{ netname }}_hosts/"
  register: stat_predefined_tinc_hosts_files

#- debug: msg="{{ stat_predefined_tinc_hosts_files }}"

- name: sync the predefined tinc hosts files
  synchronize: >
    src="files/tinc_{{ netname }}_hosts/"
    dest=/etc/tinc/{{ netname }}/hosts/
    rsync_opts="--exclude=.placeholder --exclude=*/"
#    rsync_opts="--filter='+ [a-z]*' --filter='- *' --filter='- .??*'"
  when:
    - stat_predefined_tinc_hosts_files.stat.isdir is defined
    - stat_predefined_tinc_hosts_files.stat.isdir
  notify:
    - reload tinc

- name: run handlers
  meta: flush_handlers

- name: ensure tinc is started
  service: >
    name=tinc
    enabled=yes
    state=started
    pattern=tincd -n {{ netname }}
  when: ansible_service_mgr != 'systemd' or ansible_distribution != 'Debian' or ansible_lsb.major_release < '9'

#- debug: msg="{{ ansible_distribution }}.{{ ansible_lsb.major_release }} {{ ansible_service_mgr }} tinc@{{ netname }}"

- name: ensure tinc is started on new debian
  service: >
    name=tinc@{{ netname }}
    enabled=yes
    state=started
  when:
    - ansible_service_mgr == 'systemd'
    - ansible_distribution != 'Debian' or ansible_lsb.major_release >= 9

- name: add nodes to /etc/hosts (ansible_inventory resolves to vpn_ip)
  lineinfile: dest=/etc/hosts regexp='.* {{ hostvars[item].inventory_hostname }}.{{ netname }}.tinc$' line="{{ hostvars[item].vpn_ip }}   {{ hostvars[item].inventory_hostname }}.{{ netname }}.tinc" state=present
  when: hostvars[item].vpn_ip is defined
  with_items: "{{ groups['vpn'] }}"
